{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["export type Template<T extends object> = (data: T) => string;\n\nfunction* parse(value: string): Generator<Token, Token> {\n  let index = 0;\n\n  while (index < value.length) {\n    if (value[index] === \"\\\\\") {\n      yield { type: \"ESCAPED\", index, value: value[index + 1] || \"\" };\n      index += 2;\n      continue;\n    }\n\n    if (value[index] === \"{\" && value[index + 1] === \"{\") {\n      yield { type: \"{{\", index, value: \"{{\" };\n      index += 2;\n      continue;\n    }\n\n    if (value[index] === \"}\" && value[index + 1] === \"}\") {\n      yield { type: \"}}\", index, value: \"{{\" };\n      index += 2;\n      continue;\n    }\n\n    yield { type: \"CHAR\", index, value: value[index++] };\n  }\n\n  return { type: \"END\", index, value: \"\" };\n}\n\ninterface Token {\n  type: \"{{\" | \"}}\" | \"CHAR\" | \"ESCAPED\" | \"END\";\n  index: number;\n  value: string;\n}\n\nclass It {\n  #peek?: Token;\n\n  constructor(private tokens: Generator<Token, Token>) {}\n\n  peek(): Token {\n    if (!this.#peek) {\n      const next = this.tokens.next();\n      this.#peek = next.value;\n    }\n    return this.#peek;\n  }\n\n  tryConsume(type: Token[\"type\"]): Token | undefined {\n    const token = this.peek();\n    if (token.type !== type) return undefined;\n    this.#peek = undefined;\n    return token;\n  }\n\n  consume(type: Token[\"type\"]): Token {\n    const token = this.peek();\n    if (token.type !== type) {\n      throw new TypeError(\n        `Unexpected ${token.type} at index ${token.index}, expected ${type}`,\n      );\n    }\n    this.#peek = undefined;\n    return token;\n  }\n}\n\n/**\n * Fast and simple string templates.\n */\nexport function template<T extends object = object>(value: string) {\n  const it = new It(parse(value));\n  const values: Array<string | Template<T>> = [];\n  let text = \"\";\n\n  while (true) {\n    const value = it.tryConsume(\"CHAR\") || it.tryConsume(\"ESCAPED\");\n    if (value) {\n      text += value.value;\n      continue;\n    }\n\n    if (text) {\n      values.push(text);\n      text = \"\";\n    }\n\n    if (it.tryConsume(\"{{\")) {\n      const path: string[] = [];\n      let key = \"\";\n\n      while (true) {\n        const escaped = it.tryConsume(\"ESCAPED\");\n        if (escaped) {\n          key += escaped.value;\n          continue;\n        }\n\n        const char = it.tryConsume(\"CHAR\");\n        if (char) {\n          if (char.value === \".\") {\n            path.push(key);\n            key = \"\";\n            continue;\n          }\n          key += char.value;\n          continue;\n        }\n\n        path.push(key);\n        it.consume(\"}}\");\n        break;\n      }\n\n      values.push(getter(path));\n      continue;\n    }\n\n    it.consume(\"END\");\n    break;\n  }\n\n  return (data: T) => {\n    let result = \"\";\n    for (const value of values) {\n      result += typeof value === \"string\" ? value : value(data);\n    }\n    return result;\n  };\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getter(path: string[]) {\n  return (data: any) => {\n    let value = data;\n    for (const key of path) {\n      if (hasOwnProperty.call(value, key)) {\n        value = value[key];\n      } else {\n        throw new TypeError(`Missing ${path.map(escape).join(\".\")} in data`);\n      }\n    }\n    return value;\n  };\n}\n\nfunction escape(key: string) {\n  return key.replace(/\\./g, \"\\\\.\");\n}\n"]}